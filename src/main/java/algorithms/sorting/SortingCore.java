package algorithms.sorting;

public class SortingCore {

    /**
     * 排序：
     * 排序前：3，1，6，9，2，5，8，4，7
     * 排序后：1，2，3，4，5，6，7，8，9（升序），9，8，7，6，5，4，3，2，1（降序）
     */

    /**
     * 比较排序
     */

    /**
     * 排序算法的稳定性：
     *
     * 如果2个相等的元素，在排序前后的相对位置保持不变，那么这是稳定的排序算法
     *
     * (a)小括号a可以认为先出现（位置在前），(b)可以认为晚出现（位置在后）
     * 排序前：5，1，3(a)，4，7，3(b)
     * 稳定的排序：1，3（a），3（b），4，5，7
     * 不稳定的排序：1，3（b），3（a），4，5，7
     *
     * 对自定义对象进行排序的时候，稳定性会影响最终的排序效果
     * 例如：两本图书，销量一样，在排序好后，有时图书A在前面，有时图书B在前面，便不稳定，应该一直图书A在前面
     *
     * 冒泡排序是稳定算法，因为相等的不会交换位置，相对位置没有变，先出现的在后出现的前面
     */

    /**
     * 原地算法：
     * 不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入
     *
     * 也就是空间复杂度用的很少算法，空间复杂度为O(1)的都可以认为是原地算法
     * 仅靠输出来覆盖输入，也就是直接对输入参数进行修改，没有额外依赖用其他的
     *
     * 与之相对的还有 非原地算法
     *
     * 冒泡排序属于原地算法，因为他没有使用其他额外的资源，而且更是直接对入参数组进行修改使用
     */

}
