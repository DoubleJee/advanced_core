package datastructure.tree;

public class TreeCore {

    /**
     * 树形结构
     *
     *
     */

    /**
     * 树的基本概念
     *  1.节点、根节点、父节点、子节点、兄弟节点
     *  2.一棵树也可以只有1个节点，也就是只有根节点，最多只能有1个根节点
     *  3.一棵树可以没有任何节点，成为空树
     *  4.子树、左子树、右子树
     *  5.节点的度：可以称为子树的个数
     *  6.树的度：所有节点度中的最大值
     *  7.叶子节点：度为0的节点
     *  8.非叶子节点：度不为0的节点
     *  9.层数：根节点在第1层，根节点的子节点在第2层，以此类推（有些可能以0开始）
     *  10.节点的深度：从根节点到当前节点的唯一路径上的节点总数
     *  11.节点的高度：从当前节点到最远叶子节点的路径上的节点总数
     *  12.树的深度：所有节点深度中的最大值
     *  13.树的高度：所有节点高度中的最大值
     *  14.树的高度 等于 树的深度
     *
     *  15.有序树：树中任意节点的子节点之间有顺序关系
     *  16.无序树：树中任意节点的子节点之间没有顺序关系，也称为自由树
     *  17.森林：由n棵互不相交的树组成的集合，（n >= 0）
     */

    /**
     * 二叉树：
     *
     *  1.每个节点的度最大为2（最多拥有两个子树）
     *  2.左子树和右子树是有顺序的
     *  3.即使某节点只有一颗子树，也要区分左右子树
     *  4.非空二叉树的 第i层，最多有2的i - 1次方 个节点 (i >= 1)
     *  5.高度为h的二叉树上，最多有2的h次方 - 1 个节点 (h >= 1)
     *  6.对于任何一颗非空二叉树，如果叶子节点的个数为n0，度为2的节点个数为n2，则有：n0 = n2 + 1树形结构
     *  7.假设度为1的节点个数为n1，那么二叉树的节点总数 n = n0 + n1 + n2
     *  8.二叉树的边数 T = (n1 + 2 * n2) ， (n - 1) ， (n0 + n1 + n2 - 1) 这三个公式都可以推算出来
     *  9.二叉树的第i层，节点数量为 2的i次方 - 1个
     *    h为二叉树高度，叶子节点数量为：2的h次方 - 1个
     *    总节点数 n = (2的h次方 - 1)，(2的0次方 + 2的1次方 + ..... + 2的h次方 - 1)
     *    二叉树高度 h = log2(n + 1)
     *
     *
     *  真二叉树：所有节点的度要么为0，要么为2，也就是代表，要么没有，要么有两个叉
     *
     *  满二叉树：所有节点的度要么为0，要么为2，且所有的叶子节点都在最后一层，（完完整整）
     *
     *
     *
     *  完全二叉树：叶子节点只会出现最后2层，且最后1层的叶子节点都靠左对齐，度为1的节点只有左子树，度为1的节点要么1个，要么0个，
     *  出现度为1的正确节点之后，从左向右，之后的节点必须是叶子节点。
     *
     *
     *  同样节点数量的二叉树，完全二叉树的高度最小
     *  树高度 h = floor(log2n) + 1
     *  假设完全二叉树的高度为h，那么最少有2的h - 1次方个节点，最多2的h次方 - 1个节点
     *
     *  假如有n个节点，节点有序编号，编号i的父节点编号为floor(i/2)，如果2i <= n，它的左子节点编号为2i，右子节点编号为2i + 1。
     *  2i > n则没有左子节点，2i + 1 > n则没有右子节点
     *
     *  叶子节点个数计算公式：floor((n + 1) / 2)
     *  非叶子节点个数计算公式: floor(n / 2)
     *
     *
     *
     *
     *  （完全二叉树从根节点到倒数第2层是一颗满二叉树）
     *
     *  同样高度的二叉树中，满二叉树的叶子节点数量最多、总节点数量最多。
     *  满二叉树一定是真二叉树，真二叉树不一定是满二叉树。
     *
     */
}
