package datastructure;

public class Core {
    /**
     * 算法：用于解决特定问题的一系列执行步骤
     */

    /**
     * 算法批判维度：
     *  基本：
     *       正确性：算法结果是否正确
     *       可读性：让人容易理解，看得懂
     *       健壮性：对不合理输入的反应能力（不会异常）和处理能力（计算速度）
     *  高级：
     *      时间复杂度：估算程序指令的执行次数（执行时间），如：;号结尾一句指令。
     *      空间复杂度：估算所需占用的存储空间
     */

    /**
     * 时间复杂度：
     *
     *    O() 表示数据规模n对应的复杂度，忽略以下
     *         常数：固定不变的值
     *         系数、低阶
     *
     *    log2(n) n的2次幂  n能被2整除几次
     *
     *
     *    9 >> O(1)     忽略常数9
     *    2n+3 >> O(n)  忽略常数2，3
     *    n^2 + 2n +6 >> O(n^2) 直接取高阶：n^2。 2n、6低阶忽略
     *    4n^3 + 3n^2 + 22n + 100 >> O(n^3) 直接取高阶 4n^3。4常数忽略
     *    log2(n) >> O(logn)  忽略常数2，log(n)
     *
     *    时间最短排序：O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(2^n)
     *
     */
}
