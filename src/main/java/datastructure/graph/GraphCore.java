package datastructure.graph;

public class GraphCore {

    /**
     * 图：
     * 由顶点（vertex）和边（edge）组成，通常表示为 G = (V, E)
     *
     * G表示一个图，V是顶点集，E是边集
     * 顶点集V有穷且非空    （必须有一个顶点）
     * 边集E可以是空的，任意两个顶点之间都可以用边来表示它们之间的关系 （边可以一个都没有，也就是顶点之间没关系）
     */


    /**
     * 各种图的概念：
     *
     * 有向图：边是明确有方向的
     * 有向无环图（DAG）：如果一个有向图，从任意顶点出发，无法经过若干条边回到该顶点，那么它就是一个有向无环图
     * 出度：适用于有向图，一个顶点的出度为x，是指有x条边以该顶点为起点
     * 入度：适用于有向图，一个顶点的入度为x，是指有x条边以该顶点为终点
     *
     * 无向图：边是无方向的
     *
     * 混合图：边可能有无向的，也可能有有向的
     *
     * 平行边：
     * 在无向图中，关联一对顶点的无向边如果多于1条，则称这些边为平行边
     * 在有向图中，关联一对顶点的有向边如果多于1条，并且它们的方向相同，则称这些边为平行边
     * 多重图：有平行边或者有自环的图  （自环是有顶点的边又指向自己）（也叫复杂图）
     * 简单图：既没有平行边也没有自环的图
     *
     * 无向完全图：任意两个顶点之间都存在边，  n个顶点的无向完全图有 n * (n - 1) / 2条边       （直达来回）
     * 有向完全图：任意两个顶点之间都存在方向相反的两条边，   n个顶点的有向完全图有 n * (n - 1)条边   （直达来回）
     * 稠密图：边数接近于或等于完全图
     * 稀疏图：边数远远少于完全图
     *
     * 有权图：边可以拥有权值
     *
     * 连通：如果顶点x和y之间存在可相互抵达的路径（直接或间接的路径），则称x和y是连通的
     * 连通图：如果无向图G中的任意2个顶点都是连通的，则称G为连通图
     * 连通分量：无向图的极大连通子图，也就是一个无向图，能分为几个最大的连通图，连通图只有1个连通分量，就是它自身，非连通的无向图有多个连通分量
     * 强连通图：如果有向图G中任意2个顶点都是连通的，则称G为强连通图
     * 强连通分量：有向图的极大强连通子图，强连通图只有1个强连通分量，就是它自身，非强连通的有向图有多个强连通分量
     */


    /**
     * 图的实现方案：
     *
     * 邻接矩阵：
     * 一维数组存放顶点信息
     * 二维数组存放边信息 （二维数组能存放，V1 -> V2、V2 -> V1，两个方向的边信息）
     *
     * 邻接矩阵比较适合稠密图，不然会比较浪费内存，因为没边的表示方式依然占用内存
     *
     * 邻接表：
     * 一维数组存放顶点链表节点，顶点的next跟着能到达的顶点
     *
     */


    /**
     * 图的遍历：
     * 广度优先搜索：BFS，类似二叉树的层序遍历，从一个顶点开始，它直连一条边到达的所有顶点，就是第二层，第二层的所有顶点直连到达的所有顶点，就是第三层，以此类推
     *
     *
     *
     *
     */
}
